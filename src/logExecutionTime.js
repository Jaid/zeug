export function logExecutionTime(options = {}) {
    return (target, propertyKey, descriptor) => {
        if (options.log === null) {
            return descriptor;
        }
        const log = (ms) => {
            const fractionDigits = options.fractionDigits ?? 2;
            let msFormatted;
            if (fractionDigits === 0) {
                msFormatted = `${Math.trunc(ms)}`;
                if (msFormatted === `0`) {
                    msFormatted = `1`;
                }
            }
            else {
                msFormatted = ms.toFixed(fractionDigits);
            }
            let messageResolved;
            if (options.message !== undefined) {
                messageResolved = options.message
                    .replace(`{function}`, `${propertyKey}`)
                    .replace(`{ms}`, msFormatted)
                    .replace(`{msRaw}`, `${ms}`);
            }
            else {
                messageResolved = `${propertyKey} took ${msFormatted}â€¯ms`;
            }
            if (options.log !== undefined) {
                // @ts-expect-error: It says options.log can be null, which is not true
                options.log(messageResolved);
            }
            else {
                console.log(messageResolved);
            }
        };
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            const start = performance.now();
            const result = originalMethod.apply(this, args);
            const isPromise = result && typeof result.then === `function`;
            if (isPromise) {
                const asyncResult = result;
                return asyncResult.then(promiseResult => {
                    const end = performance.now();
                    const ms = end - start;
                    log(ms);
                    return promiseResult;
                });
            }
            else {
                const end = performance.now();
                const ms = end - start;
                log(ms);
                return result;
            }
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nRXhlY3V0aW9uVGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dFeGVjdXRpb25UaW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQSxNQUFNLFVBQVUsZ0JBQWdCLENBQWtDLFVBQW1CLEVBQUU7SUFDckYsT0FBTyxDQUFDLE1BQVcsRUFBRSxXQUE0QixFQUFFLFVBQThCLEVBQUUsRUFBRTtRQUNuRixJQUFJLE9BQU8sQ0FBQyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDekIsT0FBTyxVQUFVLENBQUE7UUFDbkIsQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUU7WUFDekIsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUE7WUFDbEQsSUFBSSxXQUFtQixDQUFBO1lBQ3ZCLElBQUksY0FBYyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUN6QixXQUFXLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUE7Z0JBQ2pDLElBQUksV0FBVyxLQUFLLEdBQUcsRUFBRSxDQUFDO29CQUN4QixXQUFXLEdBQUcsR0FBRyxDQUFBO2dCQUNuQixDQUFDO1lBQ0gsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLFdBQVcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1lBQzFDLENBQUM7WUFDRCxJQUFJLGVBQXVCLENBQUE7WUFDM0IsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRSxDQUFDO2dCQUNsQyxlQUFlLEdBQUcsT0FBTyxDQUFDLE9BQU87cUJBQzlCLE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQztxQkFDdkMsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7cUJBQzVCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ2hDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixlQUFlLEdBQUcsR0FBRyxXQUFXLFNBQVMsV0FBVyxLQUFLLENBQUE7WUFDM0QsQ0FBQztZQUNELElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDaEMsdUVBQXVFO2dCQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzlCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzlCLENBQUM7UUFDSCxDQUFDLENBQUE7UUFDRCxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBVSxDQUFBO1FBQzVDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxHQUFHLElBQW1CO1lBQ2pELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUMvQixNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQWtCLENBQUE7WUFDaEUsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUE7WUFDN0QsSUFBSSxTQUFTLEVBQUUsQ0FBQztnQkFDZCxNQUFNLFdBQVcsR0FBRyxNQUFnQyxDQUFBO2dCQUNwRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7b0JBQ3RDLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtvQkFDN0IsTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQTtvQkFDdEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO29CQUNQLE9BQU8sYUFBYSxDQUFBO2dCQUN0QixDQUFDLENBQUMsQ0FBQTtZQUNKLENBQUM7aUJBQU0sQ0FBQztnQkFDTixNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUE7Z0JBQzdCLE1BQU0sRUFBRSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUE7Z0JBQ3RCLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDUCxPQUFPLE1BQU0sQ0FBQTtZQUNmLENBQUM7UUFDSCxDQUFDLENBQUE7UUFDRCxPQUFPLFVBQVUsQ0FBQTtJQUNuQixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBMb2dIYW5kbGVyID0gKG1zRm9ybWF0dGVkOiBzdHJpbmcsIG1zUmF3OiBudW1iZXIpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkXG50eXBlIE9wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGZyYWN0aW9uIGRpZ2l0cyB0byB1c2Ugd2hlbiBmb3JtYXR0aW5nIHRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAgICogQGRlZmF1bHQgMlxuICAgKi9cbiAgZnJhY3Rpb25EaWdpdHM/OiBudW1iZXJcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gY2FsbCB3aXRoIHRoZSBmb3JtYXR0ZWQgdGltZSBpbiBtaWxsaXNlY29uZHMgYW5kIHRoZSByYXcgdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAqIEBkZWZhdWx0IChtZXNzYWdlOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKG1lc3NhZ2UpXG4gICAqL1xuICBsb2c/OiBMb2dIYW5kbGVyIHwgbnVsbFxuICAvKipcbiAgICogQSB0ZW1wbGF0ZSB0byB1c2Ugd2hlbiBmb3JtYXR0aW5nIHRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcy4gVGhlIHBsYWNlaG9sZGVycyBge2Z1bmN0aW9ufWAsIGB7bXN9YCBhbmQgYHttc1Jhd31gIHdpbGwgYmUgcmVzb2x2ZWQuXG4gICAqIEBkZWZhdWx0ICd7ZnVuY3Rpb259IHRvb2sge21zfeKAr21zJ1xuICAgKi9cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nRXhlY3V0aW9uVGltZTxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55PihvcHRpb25zOiBPcHRpb25zID0ge30pIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZyB8IFN5bWJvbCwgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSA9PiB7XG4gICAgaWYgKG9wdGlvbnMubG9nID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGVzY3JpcHRvclxuICAgIH1cbiAgICBjb25zdCBsb2cgPSAobXM6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgZnJhY3Rpb25EaWdpdHMgPSBvcHRpb25zLmZyYWN0aW9uRGlnaXRzID8/IDJcbiAgICAgIGxldCBtc0Zvcm1hdHRlZDogc3RyaW5nXG4gICAgICBpZiAoZnJhY3Rpb25EaWdpdHMgPT09IDApIHtcbiAgICAgICAgbXNGb3JtYXR0ZWQgPSBgJHtNYXRoLnRydW5jKG1zKX1gXG4gICAgICAgIGlmIChtc0Zvcm1hdHRlZCA9PT0gYDBgKSB7XG4gICAgICAgICAgbXNGb3JtYXR0ZWQgPSBgMWBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXNGb3JtYXR0ZWQgPSBtcy50b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKVxuICAgICAgfVxuICAgICAgbGV0IG1lc3NhZ2VSZXNvbHZlZDogc3RyaW5nXG4gICAgICBpZiAob3B0aW9ucy5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVzc2FnZVJlc29sdmVkID0gb3B0aW9ucy5tZXNzYWdlXG4gICAgICAgICAgLnJlcGxhY2UoYHtmdW5jdGlvbn1gLCBgJHtwcm9wZXJ0eUtleX1gKVxuICAgICAgICAgIC5yZXBsYWNlKGB7bXN9YCwgbXNGb3JtYXR0ZWQpXG4gICAgICAgICAgLnJlcGxhY2UoYHttc1Jhd31gLCBgJHttc31gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVzc2FnZVJlc29sdmVkID0gYCR7cHJvcGVydHlLZXl9IHRvb2sgJHttc0Zvcm1hdHRlZH3igK9tc2BcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmxvZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBJdCBzYXlzIG9wdGlvbnMubG9nIGNhbiBiZSBudWxsLCB3aGljaCBpcyBub3QgdHJ1ZVxuICAgICAgICBvcHRpb25zLmxvZyhtZXNzYWdlUmVzb2x2ZWQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlUmVzb2x2ZWQpXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZSBhcyBUXG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSB7XG4gICAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBjb25zdCByZXN1bHQgPSBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKSBhcyBSZXR1cm5UeXBlPFQ+XG4gICAgICBjb25zdCBpc1Byb21pc2UgPSByZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSBgZnVuY3Rpb25gXG4gICAgICBpZiAoaXNQcm9taXNlKSB7XG4gICAgICAgIGNvbnN0IGFzeW5jUmVzdWx0ID0gcmVzdWx0IGFzIFByb21pc2U8UmV0dXJuVHlwZTxUPj5cbiAgICAgICAgcmV0dXJuIGFzeW5jUmVzdWx0LnRoZW4ocHJvbWlzZVJlc3VsdCA9PiB7XG4gICAgICAgICAgY29uc3QgZW5kID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgICBjb25zdCBtcyA9IGVuZCAtIHN0YXJ0XG4gICAgICAgICAgbG9nKG1zKVxuICAgICAgICAgIHJldHVybiBwcm9taXNlUmVzdWx0XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICBjb25zdCBtcyA9IGVuZCAtIHN0YXJ0XG4gICAgICAgIGxvZyhtcylcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvclxuICB9XG59XG4iXX0=