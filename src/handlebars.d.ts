import Handlebars from 'handlebars';
type CompileOptions = Parameters<(typeof Handlebars)['compile']>[1];
export declare const makeHandlebars: (compileOptions?: CompileOptions) => typeof Handlebars;
export declare const makeHandlebarsWithHelpers: (helpers: Record<string, Handlebars.HelperDelegate>, compileOptions?: CompileOptions) => typeof Handlebars;
export declare const makeHtmlHandlebars: (compileOptions?: CompileOptions) => typeof Handlebars;
export declare const makeHtmlHandlebarsWithHelpers: (helpers: Record<string, Handlebars.HelperDelegate>, compileOptions?: CompileOptions) => typeof Handlebars;
export declare const makeHandlebarsRenderer: <ContextGeneric = any>(template: string, helpers?: Record<string, Handlebars.HelperDelegate>) => HandlebarsTemplateDelegate<ContextGeneric>;
export declare const renderHandlebars: <ContextGeneric = any>(template: string, context: ContextGeneric, helpers?: Record<string, Handlebars.HelperDelegate>) => string;
export declare const makeHtmlHandlebarsRenderer: <ContextGeneric = any>(template: string, helpers?: Record<string, Handlebars.HelperDelegate>) => HandlebarsTemplateDelegate<ContextGeneric>;
export declare const renderHtmlHandlebars: <ContextGeneric = any>(template: string, context: ContextGeneric, helpers?: Record<string, Handlebars.HelperDelegate>) => string;
export {};
