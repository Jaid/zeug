import { firstMatch } from 'super-regex';
const regex = /^\s*((?<hours>\d+)\s*:)?\s*((?<minutes>\d+)\s*:)?\s*(?<seconds>(?<fullSeconds>\d+)(\.(?<secondsFractalDigits>\d+))?)\s*$/;
export const parseTimecode = (input) => {
    const match = firstMatch(regex, input, {
        timeout: 1000,
    })?.namedGroups;
    console.log(match);
    if (match === undefined) {
        return;
    }
    return match;
};
export const timecodeToSeconds = (timecode) => {
    const parsed = parseTimecode(timecode);
    if (parsed === undefined) {
        return;
    }
    const hours = parsed.hours ? Number(parsed.hours) : 0;
    const secondsFromHours = hours * 60 * 60;
    const minutes = parsed.minutes ? Number(parsed.minutes) : 0;
    const secondsFromMinutes = minutes * 60;
    const seconds = Number(parsed.seconds);
    return secondsFromHours + secondsFromMinutes + seconds;
};
export const timecodeToSecondsString = (timecode) => {
    const parsed = parseTimecode(timecode);
    if (parsed === undefined) {
        return;
    }
    const hours = parsed.hours ? Number(parsed.hours) : 0;
    const secondsFromHours = hours * 60 * 60;
    const minutes = parsed.minutes ? Number(parsed.minutes) : 0;
    const secondsFromMinutes = minutes * 60;
    const seconds = Number(parsed.fullSeconds);
    const fullSeconds = secondsFromHours + secondsFromMinutes + seconds;
    if (parsed.secondsFractalDigits === undefined) {
        return fullSeconds.toString();
    }
    return `${fullSeconds}.${parsed.secondsFractalDigits}`;
};
export const timecodeToMs = (timecode) => {
    const seconds = timecodeToSeconds(timecode);
    if (seconds === undefined) {
        return;
    }
    return Math.trunc(seconds * 1000);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VUaW1lY29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYXJzZVRpbWVjb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxhQUFhLENBQUE7QUFFdEMsTUFBTSxLQUFLLEdBQUcsMEhBQTBILENBQUE7QUFFeEksTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7SUFDN0MsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDckMsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDLEVBQUUsV0FBVyxDQUFBO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNsQixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUN4QixPQUFNO0lBQ1IsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7SUFDcEQsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3RDLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ3pCLE9BQU07SUFDUixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3JELE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDeEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNELE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3RDLE9BQU8sZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsT0FBTyxDQUFBO0FBQ3hELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO0lBQzFELE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN0QyxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUN6QixPQUFNO0lBQ1IsQ0FBQztJQUNELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNyRCxNQUFNLGdCQUFnQixHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ3hDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMzRCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDdkMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUMxQyxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxPQUFPLENBQUE7SUFDbkUsSUFBSSxNQUFNLENBQUMsb0JBQW9CLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDOUMsT0FBTyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDL0IsQ0FBQztJQUNELE9BQU8sR0FBRyxXQUFXLElBQUksTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUE7QUFDeEQsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO0lBQy9DLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzNDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQzFCLE9BQU07SUFDUixDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNuQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ZpcnN0TWF0Y2h9IGZyb20gJ3N1cGVyLXJlZ2V4J1xuXG5jb25zdCByZWdleCA9IC9eXFxzKigoPzxob3Vycz5cXGQrKVxccyo6KT9cXHMqKCg/PG1pbnV0ZXM+XFxkKylcXHMqOik/XFxzKig/PHNlY29uZHM+KD88ZnVsbFNlY29uZHM+XFxkKykoXFwuKD88c2Vjb25kc0ZyYWN0YWxEaWdpdHM+XFxkKykpPylcXHMqJC9cblxuZXhwb3J0IGNvbnN0IHBhcnNlVGltZWNvZGUgPSAoaW5wdXQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBtYXRjaCA9IGZpcnN0TWF0Y2gocmVnZXgsIGlucHV0LCB7XG4gICAgdGltZW91dDogMTAwMCxcbiAgfSk/Lm5hbWVkR3JvdXBzXG4gIGNvbnNvbGUubG9nKG1hdGNoKVxuICBpZiAobWF0Y2ggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBtYXRjaFxufVxuXG5leHBvcnQgY29uc3QgdGltZWNvZGVUb1NlY29uZHMgPSAodGltZWNvZGU6IHN0cmluZykgPT4ge1xuICBjb25zdCBwYXJzZWQgPSBwYXJzZVRpbWVjb2RlKHRpbWVjb2RlKVxuICBpZiAocGFyc2VkID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBob3VycyA9IHBhcnNlZC5ob3VycyA/IE51bWJlcihwYXJzZWQuaG91cnMpIDogMFxuICBjb25zdCBzZWNvbmRzRnJvbUhvdXJzID0gaG91cnMgKiA2MCAqIDYwXG4gIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZWQubWludXRlcyA/IE51bWJlcihwYXJzZWQubWludXRlcykgOiAwXG4gIGNvbnN0IHNlY29uZHNGcm9tTWludXRlcyA9IG1pbnV0ZXMgKiA2MFxuICBjb25zdCBzZWNvbmRzID0gTnVtYmVyKHBhcnNlZC5zZWNvbmRzKVxuICByZXR1cm4gc2Vjb25kc0Zyb21Ib3VycyArIHNlY29uZHNGcm9tTWludXRlcyArIHNlY29uZHNcbn1cblxuZXhwb3J0IGNvbnN0IHRpbWVjb2RlVG9TZWNvbmRzU3RyaW5nID0gKHRpbWVjb2RlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcGFyc2VkID0gcGFyc2VUaW1lY29kZSh0aW1lY29kZSlcbiAgaWYgKHBhcnNlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgaG91cnMgPSBwYXJzZWQuaG91cnMgPyBOdW1iZXIocGFyc2VkLmhvdXJzKSA6IDBcbiAgY29uc3Qgc2Vjb25kc0Zyb21Ib3VycyA9IGhvdXJzICogNjAgKiA2MFxuICBjb25zdCBtaW51dGVzID0gcGFyc2VkLm1pbnV0ZXMgPyBOdW1iZXIocGFyc2VkLm1pbnV0ZXMpIDogMFxuICBjb25zdCBzZWNvbmRzRnJvbU1pbnV0ZXMgPSBtaW51dGVzICogNjBcbiAgY29uc3Qgc2Vjb25kcyA9IE51bWJlcihwYXJzZWQuZnVsbFNlY29uZHMpXG4gIGNvbnN0IGZ1bGxTZWNvbmRzID0gc2Vjb25kc0Zyb21Ib3VycyArIHNlY29uZHNGcm9tTWludXRlcyArIHNlY29uZHNcbiAgaWYgKHBhcnNlZC5zZWNvbmRzRnJhY3RhbERpZ2l0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZ1bGxTZWNvbmRzLnRvU3RyaW5nKClcbiAgfVxuICByZXR1cm4gYCR7ZnVsbFNlY29uZHN9LiR7cGFyc2VkLnNlY29uZHNGcmFjdGFsRGlnaXRzfWBcbn1cblxuZXhwb3J0IGNvbnN0IHRpbWVjb2RlVG9NcyA9ICh0aW1lY29kZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHNlY29uZHMgPSB0aW1lY29kZVRvU2Vjb25kcyh0aW1lY29kZSlcbiAgaWYgKHNlY29uZHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBNYXRoLnRydW5jKHNlY29uZHMgKiAxMDAwKVxufVxuIl19