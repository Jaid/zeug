import Handlebars from 'handlebars';
const defaultCompileOptions = {
    noEscape: true,
    knownHelpersOnly: true,
};
const defaultHtmlCompileOptions = {
    knownHelpersOnly: true,
};
export const makeHandlebars = (compileOptions = defaultCompileOptions) => {
    const handlebars = Handlebars.create();
    const compileNative = handlebars.compile;
    handlebars.compile = function (template, options) {
        return compileNative(template, {
            ...compileOptions,
            ...options,
        });
    };
    const precompileNative = handlebars.precompile;
    handlebars.precompile = function (template, options) {
        return precompileNative(template, {
            ...compileOptions,
            ...options,
        });
    };
    return handlebars;
};
export const makeHandlebarsWithHelpers = (helpers, compileOptions = defaultCompileOptions) => {
    const knownHelpers = Object.fromEntries(Object.keys(helpers).map(key => [key, true]));
    const handlebars = makeHandlebars({
        ...compileOptions,
        knownHelpers,
    });
    for (const [key, value] of Object.entries(helpers)) {
        handlebars.registerHelper(key, value);
    }
    return handlebars;
};
export const makeHtmlHandlebars = (compileOptions = defaultHtmlCompileOptions) => {
    return makeHandlebars(compileOptions);
};
export const makeHtmlHandlebarsWithHelpers = (helpers, compileOptions = defaultHtmlCompileOptions) => {
    return makeHandlebarsWithHelpers(helpers, compileOptions);
};
export const makeHandlebarsRenderer = (template, helpers) => {
    if (helpers === undefined) {
        return Handlebars.compile(template, defaultCompileOptions);
    }
    const handlebars = makeHandlebarsWithHelpers(helpers);
    return handlebars.compile(template);
};
export const renderHandlebars = (template, context, helpers) => {
    const templateResolver = helpers === undefined ? makeHandlebarsRenderer(template) : makeHandlebarsWithHelpers(helpers).compile(template);
    return templateResolver(context);
};
export const makeHtmlHandlebarsRenderer = (template, helpers) => {
    if (helpers === undefined) {
        return Handlebars.compile(template, defaultHtmlCompileOptions);
    }
    const handlebars = makeHtmlHandlebarsWithHelpers(helpers);
    return handlebars.compile(template);
};
export const renderHtmlHandlebars = (template, context, helpers) => {
    const templateResolver = helpers === undefined ? makeHtmlHandlebarsRenderer(template) : makeHtmlHandlebarsWithHelpers(helpers).compile(template);
    return templateResolver(context);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlYmFycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oYW5kbGViYXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQTtBQUtuQyxNQUFNLHFCQUFxQixHQUFtQjtJQUM1QyxRQUFRLEVBQUUsSUFBSTtJQUNkLGdCQUFnQixFQUFFLElBQUk7Q0FDdkIsQ0FBQTtBQUNELE1BQU0seUJBQXlCLEdBQW1CO0lBQ2hELGdCQUFnQixFQUFFLElBQUk7Q0FDdkIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLGlCQUFpQyxxQkFBcUIsRUFBRSxFQUFFO0lBQ3ZGLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN0QyxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFBO0lBQ3hDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsVUFBVSxRQUFnQixFQUFFLE9BQXVCO1FBQ3RFLE9BQU8sYUFBYSxDQUFDLFFBQVEsRUFBRTtZQUM3QixHQUFHLGNBQWM7WUFDakIsR0FBRyxPQUFPO1NBQ1gsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFBO0lBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFBO0lBQzlDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxRQUFnQixFQUFFLE9BQTBCO1FBQzVFLE9BQU8sZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1lBQ2hDLEdBQUcsY0FBYztZQUNqQixHQUFHLE9BQU87U0FDWCxDQUFDLENBQUE7SUFDSixDQUFDLENBQUE7SUFDRCxPQUFPLFVBQVUsQ0FBQTtBQUNuQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLE9BQWtELEVBQUUsaUJBQWlDLHFCQUFxQixFQUFFLEVBQUU7SUFDdEosTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNyRixNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUM7UUFDaEMsR0FBRyxjQUFjO1FBQ2pCLFlBQVk7S0FDYixDQUFDLENBQUE7SUFDRixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ25ELFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFDRCxPQUFPLFVBQVUsQ0FBQTtBQUNuQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLGlCQUFpQyx5QkFBeUIsRUFBRSxFQUFFO0lBQy9GLE9BQU8sY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQ3ZDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQUMsT0FBa0QsRUFBRSxpQkFBaUMseUJBQXlCLEVBQUUsRUFBRTtJQUM5SixPQUFPLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQTtBQUMzRCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUF1QixRQUFnQixFQUFFLE9BQW1ELEVBQUUsRUFBRTtJQUNwSSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQWlCLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO0lBQzVFLENBQUM7SUFDRCxNQUFNLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNyRCxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQWlCLFFBQVEsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQXVCLFFBQWdCLEVBQUUsT0FBdUIsRUFBRSxPQUFtRCxFQUFFLEVBQUU7SUFDdkosTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBaUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBaUIsUUFBUSxDQUFDLENBQUE7SUFDeEssT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNsQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUF1QixRQUFnQixFQUFFLE9BQW1ELEVBQUUsRUFBRTtJQUN4SSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQWlCLFFBQVEsRUFBRSx5QkFBeUIsQ0FBQyxDQUFBO0lBQ2hGLENBQUM7SUFDRCxNQUFNLFVBQVUsR0FBRyw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN6RCxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQWlCLFFBQVEsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQXVCLFFBQWdCLEVBQUUsT0FBdUIsRUFBRSxPQUFtRCxFQUFFLEVBQUU7SUFDM0osTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBaUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBaUIsUUFBUSxDQUFDLENBQUE7SUFDaEwsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNsQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGFuZGxlYmFycyBmcm9tICdoYW5kbGViYXJzJ1xuXG50eXBlIENvbXBpbGVPcHRpb25zID0gUGFyYW1ldGVyczwodHlwZW9mIEhhbmRsZWJhcnMpWydjb21waWxlJ10+WzFdXG50eXBlIFByZWNvbXBpbGVPcHRpb25zID0gUGFyYW1ldGVyczwodHlwZW9mIEhhbmRsZWJhcnMpWydwcmVjb21waWxlJ10+WzFdXG5cbmNvbnN0IGRlZmF1bHRDb21waWxlT3B0aW9uczogQ29tcGlsZU9wdGlvbnMgPSB7XG4gIG5vRXNjYXBlOiB0cnVlLFxuICBrbm93bkhlbHBlcnNPbmx5OiB0cnVlLFxufVxuY29uc3QgZGVmYXVsdEh0bWxDb21waWxlT3B0aW9uczogQ29tcGlsZU9wdGlvbnMgPSB7XG4gIGtub3duSGVscGVyc09ubHk6IHRydWUsXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlSGFuZGxlYmFycyA9IChjb21waWxlT3B0aW9uczogQ29tcGlsZU9wdGlvbnMgPSBkZWZhdWx0Q29tcGlsZU9wdGlvbnMpID0+IHtcbiAgY29uc3QgaGFuZGxlYmFycyA9IEhhbmRsZWJhcnMuY3JlYXRlKClcbiAgY29uc3QgY29tcGlsZU5hdGl2ZSA9IGhhbmRsZWJhcnMuY29tcGlsZVxuICBoYW5kbGViYXJzLmNvbXBpbGUgPSBmdW5jdGlvbiAodGVtcGxhdGU6IHN0cmluZywgb3B0aW9uczogQ29tcGlsZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tcGlsZU5hdGl2ZSh0ZW1wbGF0ZSwge1xuICAgICAgLi4uY29tcGlsZU9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pXG4gIH1cbiAgY29uc3QgcHJlY29tcGlsZU5hdGl2ZSA9IGhhbmRsZWJhcnMucHJlY29tcGlsZVxuICBoYW5kbGViYXJzLnByZWNvbXBpbGUgPSBmdW5jdGlvbiAodGVtcGxhdGU6IHN0cmluZywgb3B0aW9uczogUHJlY29tcGlsZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gcHJlY29tcGlsZU5hdGl2ZSh0ZW1wbGF0ZSwge1xuICAgICAgLi4uY29tcGlsZU9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIGhhbmRsZWJhcnNcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VIYW5kbGViYXJzV2l0aEhlbHBlcnMgPSAoaGVscGVyczogUmVjb3JkPHN0cmluZywgSGFuZGxlYmFycy5IZWxwZXJEZWxlZ2F0ZT4sIGNvbXBpbGVPcHRpb25zOiBDb21waWxlT3B0aW9ucyA9IGRlZmF1bHRDb21waWxlT3B0aW9ucykgPT4ge1xuICBjb25zdCBrbm93bkhlbHBlcnMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmtleXMoaGVscGVycykubWFwKGtleSA9PiBba2V5LCB0cnVlXSkpXG4gIGNvbnN0IGhhbmRsZWJhcnMgPSBtYWtlSGFuZGxlYmFycyh7XG4gICAgLi4uY29tcGlsZU9wdGlvbnMsXG4gICAga25vd25IZWxwZXJzLFxuICB9KVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhoZWxwZXJzKSkge1xuICAgIGhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoa2V5LCB2YWx1ZSlcbiAgfVxuICByZXR1cm4gaGFuZGxlYmFyc1xufVxuXG5leHBvcnQgY29uc3QgbWFrZUh0bWxIYW5kbGViYXJzID0gKGNvbXBpbGVPcHRpb25zOiBDb21waWxlT3B0aW9ucyA9IGRlZmF1bHRIdG1sQ29tcGlsZU9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIG1ha2VIYW5kbGViYXJzKGNvbXBpbGVPcHRpb25zKVxufVxuXG5leHBvcnQgY29uc3QgbWFrZUh0bWxIYW5kbGViYXJzV2l0aEhlbHBlcnMgPSAoaGVscGVyczogUmVjb3JkPHN0cmluZywgSGFuZGxlYmFycy5IZWxwZXJEZWxlZ2F0ZT4sIGNvbXBpbGVPcHRpb25zOiBDb21waWxlT3B0aW9ucyA9IGRlZmF1bHRIdG1sQ29tcGlsZU9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIG1ha2VIYW5kbGViYXJzV2l0aEhlbHBlcnMoaGVscGVycywgY29tcGlsZU9wdGlvbnMpXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlSGFuZGxlYmFyc1JlbmRlcmVyID0gPENvbnRleHRHZW5lcmljID0gYW55Pih0ZW1wbGF0ZTogc3RyaW5nLCBoZWxwZXJzPzogUmVjb3JkPHN0cmluZywgSGFuZGxlYmFycy5IZWxwZXJEZWxlZ2F0ZT4pID0+IHtcbiAgaWYgKGhlbHBlcnMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBIYW5kbGViYXJzLmNvbXBpbGU8Q29udGV4dEdlbmVyaWM+KHRlbXBsYXRlLCBkZWZhdWx0Q29tcGlsZU9wdGlvbnMpXG4gIH1cbiAgY29uc3QgaGFuZGxlYmFycyA9IG1ha2VIYW5kbGViYXJzV2l0aEhlbHBlcnMoaGVscGVycylcbiAgcmV0dXJuIGhhbmRsZWJhcnMuY29tcGlsZTxDb250ZXh0R2VuZXJpYz4odGVtcGxhdGUpXG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJIYW5kbGViYXJzID0gPENvbnRleHRHZW5lcmljID0gYW55Pih0ZW1wbGF0ZTogc3RyaW5nLCBjb250ZXh0OiBDb250ZXh0R2VuZXJpYywgaGVscGVycz86IFJlY29yZDxzdHJpbmcsIEhhbmRsZWJhcnMuSGVscGVyRGVsZWdhdGU+KSA9PiB7XG4gIGNvbnN0IHRlbXBsYXRlUmVzb2x2ZXIgPSBoZWxwZXJzID09PSB1bmRlZmluZWQgPyBtYWtlSGFuZGxlYmFyc1JlbmRlcmVyPENvbnRleHRHZW5lcmljPih0ZW1wbGF0ZSkgOiBtYWtlSGFuZGxlYmFyc1dpdGhIZWxwZXJzKGhlbHBlcnMpLmNvbXBpbGU8Q29udGV4dEdlbmVyaWM+KHRlbXBsYXRlKVxuICByZXR1cm4gdGVtcGxhdGVSZXNvbHZlcihjb250ZXh0KVxufVxuXG5leHBvcnQgY29uc3QgbWFrZUh0bWxIYW5kbGViYXJzUmVuZGVyZXIgPSA8Q29udGV4dEdlbmVyaWMgPSBhbnk+KHRlbXBsYXRlOiBzdHJpbmcsIGhlbHBlcnM/OiBSZWNvcmQ8c3RyaW5nLCBIYW5kbGViYXJzLkhlbHBlckRlbGVnYXRlPikgPT4ge1xuICBpZiAoaGVscGVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEhhbmRsZWJhcnMuY29tcGlsZTxDb250ZXh0R2VuZXJpYz4odGVtcGxhdGUsIGRlZmF1bHRIdG1sQ29tcGlsZU9wdGlvbnMpXG4gIH1cbiAgY29uc3QgaGFuZGxlYmFycyA9IG1ha2VIdG1sSGFuZGxlYmFyc1dpdGhIZWxwZXJzKGhlbHBlcnMpXG4gIHJldHVybiBoYW5kbGViYXJzLmNvbXBpbGU8Q29udGV4dEdlbmVyaWM+KHRlbXBsYXRlKVxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVySHRtbEhhbmRsZWJhcnMgPSA8Q29udGV4dEdlbmVyaWMgPSBhbnk+KHRlbXBsYXRlOiBzdHJpbmcsIGNvbnRleHQ6IENvbnRleHRHZW5lcmljLCBoZWxwZXJzPzogUmVjb3JkPHN0cmluZywgSGFuZGxlYmFycy5IZWxwZXJEZWxlZ2F0ZT4pID0+IHtcbiAgY29uc3QgdGVtcGxhdGVSZXNvbHZlciA9IGhlbHBlcnMgPT09IHVuZGVmaW5lZCA/IG1ha2VIdG1sSGFuZGxlYmFyc1JlbmRlcmVyPENvbnRleHRHZW5lcmljPih0ZW1wbGF0ZSkgOiBtYWtlSHRtbEhhbmRsZWJhcnNXaXRoSGVscGVycyhoZWxwZXJzKS5jb21waWxlPENvbnRleHRHZW5lcmljPih0ZW1wbGF0ZSlcbiAgcmV0dXJuIHRlbXBsYXRlUmVzb2x2ZXIoY29udGV4dClcbn1cbiJdfQ==