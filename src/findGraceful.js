const makeCompact = (key) => {
    return key.replaceAll(/\W/g, ``);
};
export function findGracefulIndex(needle, haystack, searchResolver) {
    const resolvedKeys = [];
    let resolvedSearchResolver;
    if (searchResolver === undefined) {
        resolvedSearchResolver = (entry) => entry;
    }
    else if (typeof searchResolver === `string`) {
        resolvedSearchResolver = (entry) => entry[searchResolver];
    }
    else {
        resolvedSearchResolver = searchResolver;
    }
    for (const [index, entry] of haystack.entries()) {
        const resolvedKey = resolvedSearchResolver(entry, index);
        if (resolvedKey === needle) {
            return index;
        }
        resolvedKeys.push(resolvedKey);
    }
    const resolvedKeysLowercase = resolvedKeys.map(resolvedKey => resolvedKey.toLowerCase());
    const lowercasedNeedle = needle.toLowerCase();
    const index = resolvedKeysLowercase.indexOf(lowercasedNeedle);
    if (index !== -1) {
        return index;
    }
    const compactNeedle = makeCompact(lowercasedNeedle);
    const gracefulIndex = resolvedKeysLowercase.findIndex(resolvedKey => makeCompact(resolvedKey) === compactNeedle);
    if (gracefulIndex !== -1) {
        return gracefulIndex;
    }
}
export function findGraceful(needle, haystack, searchResolver) {
    const resolvedKeys = [];
    let resolvedSearchResolver;
    if (searchResolver === undefined) {
        resolvedSearchResolver = (entry) => entry;
    }
    else if (typeof searchResolver === `string`) {
        resolvedSearchResolver = (entry) => entry[searchResolver];
    }
    else {
        resolvedSearchResolver = searchResolver;
    }
    for (const [index, entry] of haystack.entries()) {
        const resolvedKey = resolvedSearchResolver(entry, index);
        if (resolvedKey === needle) {
            return entry;
        }
        resolvedKeys.push(resolvedKey);
    }
    const resolvedKeysLowercase = resolvedKeys.map(resolvedKey => resolvedKey.toLowerCase());
    const lowercasedNeedle = needle.toLowerCase();
    const index = resolvedKeysLowercase.indexOf(lowercasedNeedle);
    if (index !== -1) {
        return haystack[index];
    }
    const compactNeedle = makeCompact(lowercasedNeedle);
    const gracefulIndex = resolvedKeysLowercase.findIndex(resolvedKey => makeCompact(resolvedKey) === compactNeedle);
    if (gracefulIndex !== -1) {
        return haystack[gracefulIndex];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZEdyYWNlZnVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZpbmRHcmFjZWZ1bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO0lBQ2xDLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDbEMsQ0FBQyxDQUFBO0FBSUQsTUFBTSxVQUFVLGlCQUFpQixDQUF1QixNQUFjLEVBQUUsUUFBZ0MsRUFBRSxjQUE4RDtJQUN0SyxNQUFNLFlBQVksR0FBYSxFQUFFLENBQUE7SUFDakMsSUFBSSxzQkFBNEQsQ0FBQTtJQUNoRSxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUNqQyxzQkFBc0IsR0FBRyxDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUFVLEtBQUssQ0FBQTtJQUMxRSxDQUFDO1NBQU0sSUFBSSxPQUFPLGNBQWMsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUM5QyxzQkFBc0IsR0FBRyxDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUFVLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUMxRixDQUFDO1NBQU0sQ0FBQztRQUNOLHNCQUFzQixHQUFHLGNBQWMsQ0FBQTtJQUN6QyxDQUFDO0lBQ0QsS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1FBQ2hELE1BQU0sV0FBVyxHQUFHLHNCQUFzQixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN4RCxJQUFJLFdBQVcsS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUMzQixPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFDRCxNQUFNLHFCQUFxQixHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUN4RixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUM3QyxNQUFNLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUM3RCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2pCLE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUNELE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ25ELE1BQU0sYUFBYSxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQTtJQUNoSCxJQUFJLGFBQWEsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sYUFBYSxDQUFBO0lBQ3RCLENBQUM7QUFDSCxDQUFDO0FBT0QsTUFBTSxVQUFVLFlBQVksQ0FBdUIsTUFBYyxFQUFFLFFBQWdDLEVBQUUsY0FBOEQ7SUFDakssTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFBO0lBQ2pDLElBQUksc0JBQTRELENBQUE7SUFDaEUsSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDakMsc0JBQXNCLEdBQUcsQ0FBQyxLQUEyQixFQUFFLEVBQUUsQ0FBVSxLQUFLLENBQUE7SUFDMUUsQ0FBQztTQUFNLElBQUksT0FBTyxjQUFjLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDOUMsc0JBQXNCLEdBQUcsQ0FBQyxLQUEyQixFQUFFLEVBQUUsQ0FBVSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDMUYsQ0FBQztTQUFNLENBQUM7UUFDTixzQkFBc0IsR0FBRyxjQUFjLENBQUE7SUFDekMsQ0FBQztJQUNELEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUNoRCxNQUFNLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDeEQsSUFBSSxXQUFXLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDM0IsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDO1FBQ0QsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBQ0QsTUFBTSxxQkFBcUIsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7SUFDeEYsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDN0MsTUFBTSxLQUFLLEdBQUcscUJBQXFCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDN0QsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqQixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBQ0QsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDbkQsTUFBTSxhQUFhLEdBQUcscUJBQXFCLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLGFBQWEsQ0FBQyxDQUFBO0lBQ2hILElBQUksYUFBYSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDekIsT0FBTyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDaEMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBTZWFyY2hSZXNvbHZlcjxUPiA9ICgoZW50cnk6IFQsIGluZGV4OiBudW1iZXIpID0+IHN0cmluZylcblxuY29uc3QgbWFrZUNvbXBhY3QgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlQWxsKC9cXFcvZywgYGApXG59XG5leHBvcnQgZnVuY3Rpb24gZmluZEdyYWNlZnVsSW5kZXgobmVlZGxlOiBzdHJpbmcsIGhheXN0YWNrOiBzdHJpbmdbXSk6IG51bWJlciB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRHcmFjZWZ1bEluZGV4KG5lZWRsZTogc3RyaW5nLCBoYXlzdGFjazogUmVjb3JkPHN0cmluZywgdW5rbm93bj5bXSwgc2VhcmNoUmVzb2x2ZXI6IHN0cmluZyk6IG51bWJlciB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRHcmFjZWZ1bEluZGV4PEhheXN0YWNrRW50cnlHZW5lcmljPihuZWVkbGU6IHN0cmluZywgaGF5c3RhY2s6IEhheXN0YWNrRW50cnlHZW5lcmljW10sIHNlYXJjaFJlc29sdmVyOiBTZWFyY2hSZXNvbHZlcjxIYXlzdGFja0VudHJ5R2VuZXJpYz4pOiBudW1iZXIgfCB1bmRlZmluZWRcbmV4cG9ydCBmdW5jdGlvbiBmaW5kR3JhY2VmdWxJbmRleDxIYXlzdGFja0VudHJ5R2VuZXJpYz4obmVlZGxlOiBzdHJpbmcsIGhheXN0YWNrOiBIYXlzdGFja0VudHJ5R2VuZXJpY1tdLCBzZWFyY2hSZXNvbHZlcj86IFNlYXJjaFJlc29sdmVyPEhheXN0YWNrRW50cnlHZW5lcmljPiB8IHN0cmluZykge1xuICBjb25zdCByZXNvbHZlZEtleXM6IHN0cmluZ1tdID0gW11cbiAgbGV0IHJlc29sdmVkU2VhcmNoUmVzb2x2ZXI6IFNlYXJjaFJlc29sdmVyPEhheXN0YWNrRW50cnlHZW5lcmljPlxuICBpZiAoc2VhcmNoUmVzb2x2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlc29sdmVkU2VhcmNoUmVzb2x2ZXIgPSAoZW50cnk6IEhheXN0YWNrRW50cnlHZW5lcmljKSA9PiA8c3RyaW5nPiBlbnRyeVxuICB9IGVsc2UgaWYgKHR5cGVvZiBzZWFyY2hSZXNvbHZlciA9PT0gYHN0cmluZ2ApIHtcbiAgICByZXNvbHZlZFNlYXJjaFJlc29sdmVyID0gKGVudHJ5OiBIYXlzdGFja0VudHJ5R2VuZXJpYykgPT4gPHN0cmluZz4gZW50cnlbc2VhcmNoUmVzb2x2ZXJdXG4gIH0gZWxzZSB7XG4gICAgcmVzb2x2ZWRTZWFyY2hSZXNvbHZlciA9IHNlYXJjaFJlc29sdmVyXG4gIH1cbiAgZm9yIChjb25zdCBbaW5kZXgsIGVudHJ5XSBvZiBoYXlzdGFjay5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCByZXNvbHZlZEtleSA9IHJlc29sdmVkU2VhcmNoUmVzb2x2ZXIoZW50cnksIGluZGV4KVxuICAgIGlmIChyZXNvbHZlZEtleSA9PT0gbmVlZGxlKSB7XG4gICAgICByZXR1cm4gaW5kZXhcbiAgICB9XG4gICAgcmVzb2x2ZWRLZXlzLnB1c2gocmVzb2x2ZWRLZXkpXG4gIH1cbiAgY29uc3QgcmVzb2x2ZWRLZXlzTG93ZXJjYXNlID0gcmVzb2x2ZWRLZXlzLm1hcChyZXNvbHZlZEtleSA9PiByZXNvbHZlZEtleS50b0xvd2VyQ2FzZSgpKVxuICBjb25zdCBsb3dlcmNhc2VkTmVlZGxlID0gbmVlZGxlLnRvTG93ZXJDYXNlKClcbiAgY29uc3QgaW5kZXggPSByZXNvbHZlZEtleXNMb3dlcmNhc2UuaW5kZXhPZihsb3dlcmNhc2VkTmVlZGxlKVxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcmV0dXJuIGluZGV4XG4gIH1cbiAgY29uc3QgY29tcGFjdE5lZWRsZSA9IG1ha2VDb21wYWN0KGxvd2VyY2FzZWROZWVkbGUpXG4gIGNvbnN0IGdyYWNlZnVsSW5kZXggPSByZXNvbHZlZEtleXNMb3dlcmNhc2UuZmluZEluZGV4KHJlc29sdmVkS2V5ID0+IG1ha2VDb21wYWN0KHJlc29sdmVkS2V5KSA9PT0gY29tcGFjdE5lZWRsZSlcbiAgaWYgKGdyYWNlZnVsSW5kZXggIT09IC0xKSB7XG4gICAgcmV0dXJuIGdyYWNlZnVsSW5kZXhcbiAgfVxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9uIGlzIGEgY2xvbmUgb2YgZmluZEdyYWNlZnVsSW5kZXggKG9ubHkgZGlmZmVyZW5jZSBhcmUgdGhlIHJlc29sdmVkIGluZGV4ZXMpLFxuLy8gYnV0IEkgZG9u4oCZdCBrbm93IGhvdyB0byBwYXNzIGRvd24gdGhlIGFyZ3VtZW50cyB3aXRob3V0IGdldHRpbmcgVHlwZVNjcmlwdCBvdmVybG9hZCBlcnJvcnNcbmV4cG9ydCBmdW5jdGlvbiBmaW5kR3JhY2VmdWwobmVlZGxlOiBzdHJpbmcsIGhheXN0YWNrOiBzdHJpbmdbXSwgc2VhcmNoUmVzb2x2ZXI/OiBTZWFyY2hSZXNvbHZlcjxzdHJpbmc+KTogc3RyaW5nIHwgdW5kZWZpbmVkXG5leHBvcnQgZnVuY3Rpb24gZmluZEdyYWNlZnVsPEhheXN0YWNrRW50cnlHZW5lcmljIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KG5lZWRsZTogc3RyaW5nLCBoYXlzdGFjazogSGF5c3RhY2tFbnRyeUdlbmVyaWNbXSwgc2VhcmNoUmVzb2x2ZXI6IHN0cmluZyk6IEhheXN0YWNrRW50cnlHZW5lcmljIHwgdW5kZWZpbmVkXG5leHBvcnQgZnVuY3Rpb24gZmluZEdyYWNlZnVsPEhheXN0YWNrRW50cnlHZW5lcmljPihuZWVkbGU6IHN0cmluZywgaGF5c3RhY2s6IEhheXN0YWNrRW50cnlHZW5lcmljW10sIHNlYXJjaFJlc29sdmVyOiBTZWFyY2hSZXNvbHZlcjxIYXlzdGFja0VudHJ5R2VuZXJpYz4pOiBIYXlzdGFja0VudHJ5R2VuZXJpYyB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRHcmFjZWZ1bDxIYXlzdGFja0VudHJ5R2VuZXJpYz4obmVlZGxlOiBzdHJpbmcsIGhheXN0YWNrOiBIYXlzdGFja0VudHJ5R2VuZXJpY1tdLCBzZWFyY2hSZXNvbHZlcj86IFNlYXJjaFJlc29sdmVyPEhheXN0YWNrRW50cnlHZW5lcmljPiB8IHN0cmluZykge1xuICBjb25zdCByZXNvbHZlZEtleXM6IHN0cmluZ1tdID0gW11cbiAgbGV0IHJlc29sdmVkU2VhcmNoUmVzb2x2ZXI6IFNlYXJjaFJlc29sdmVyPEhheXN0YWNrRW50cnlHZW5lcmljPlxuICBpZiAoc2VhcmNoUmVzb2x2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlc29sdmVkU2VhcmNoUmVzb2x2ZXIgPSAoZW50cnk6IEhheXN0YWNrRW50cnlHZW5lcmljKSA9PiA8c3RyaW5nPiBlbnRyeVxuICB9IGVsc2UgaWYgKHR5cGVvZiBzZWFyY2hSZXNvbHZlciA9PT0gYHN0cmluZ2ApIHtcbiAgICByZXNvbHZlZFNlYXJjaFJlc29sdmVyID0gKGVudHJ5OiBIYXlzdGFja0VudHJ5R2VuZXJpYykgPT4gPHN0cmluZz4gZW50cnlbc2VhcmNoUmVzb2x2ZXJdXG4gIH0gZWxzZSB7XG4gICAgcmVzb2x2ZWRTZWFyY2hSZXNvbHZlciA9IHNlYXJjaFJlc29sdmVyXG4gIH1cbiAgZm9yIChjb25zdCBbaW5kZXgsIGVudHJ5XSBvZiBoYXlzdGFjay5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCByZXNvbHZlZEtleSA9IHJlc29sdmVkU2VhcmNoUmVzb2x2ZXIoZW50cnksIGluZGV4KVxuICAgIGlmIChyZXNvbHZlZEtleSA9PT0gbmVlZGxlKSB7XG4gICAgICByZXR1cm4gZW50cnlcbiAgICB9XG4gICAgcmVzb2x2ZWRLZXlzLnB1c2gocmVzb2x2ZWRLZXkpXG4gIH1cbiAgY29uc3QgcmVzb2x2ZWRLZXlzTG93ZXJjYXNlID0gcmVzb2x2ZWRLZXlzLm1hcChyZXNvbHZlZEtleSA9PiByZXNvbHZlZEtleS50b0xvd2VyQ2FzZSgpKVxuICBjb25zdCBsb3dlcmNhc2VkTmVlZGxlID0gbmVlZGxlLnRvTG93ZXJDYXNlKClcbiAgY29uc3QgaW5kZXggPSByZXNvbHZlZEtleXNMb3dlcmNhc2UuaW5kZXhPZihsb3dlcmNhc2VkTmVlZGxlKVxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcmV0dXJuIGhheXN0YWNrW2luZGV4XVxuICB9XG4gIGNvbnN0IGNvbXBhY3ROZWVkbGUgPSBtYWtlQ29tcGFjdChsb3dlcmNhc2VkTmVlZGxlKVxuICBjb25zdCBncmFjZWZ1bEluZGV4ID0gcmVzb2x2ZWRLZXlzTG93ZXJjYXNlLmZpbmRJbmRleChyZXNvbHZlZEtleSA9PiBtYWtlQ29tcGFjdChyZXNvbHZlZEtleSkgPT09IGNvbXBhY3ROZWVkbGUpXG4gIGlmIChncmFjZWZ1bEluZGV4ICE9PSAtMSkge1xuICAgIHJldHVybiBoYXlzdGFja1tncmFjZWZ1bEluZGV4XVxuICB9XG59XG4iXX0=