import pathNative from 'node:path';
// From: https://github.com/sindresorhus/slash/blob/98b618f5a3bfcb5dd374b204868818845b87bb2f/index.js#L1-9
export const slash = (fileOrFolder) => {
    const isExtendedLengthPath = fileOrFolder.startsWith(`\\\\?\\`); // See https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#win32-file-namespaces:~:text=file%20I/O%2C-,the%20%22%5C%5C%3F%5C%22%20prefix,-to%20a%20path
    if (isExtendedLengthPath) {
        return fileOrFolder;
    }
    return fileOrFolder.replaceAll(`\\`, `/`);
};
export const normalize = (fileOrFolder) => {
    return slash(pathNative.normalize(fileOrFolder));
};
export const join = (...pathSegments) => {
    return slash(pathNative.join(...pathSegments));
};
export const resolve = (...pathSegments) => {
    return slash(pathNative.resolve(...pathSegments));
};
export const isAbsolute = (fileOrFolder) => {
    fileOrFolder = slash(fileOrFolder);
    return pathNative.isAbsolute(fileOrFolder);
};
export const relative = (from, to) => {
    return slash(pathNative.relative(from, to));
};
export const dirname = (fileOrFolder) => {
    return slash(pathNative.dirname(fileOrFolder));
};
export const basename = (fileOrFolder, suffix) => {
    return slash(pathNative.basename(fileOrFolder, suffix));
};
export const extname = (fileOrFolder) => {
    return slash(pathNative.extname(fileOrFolder));
};
export const parse = (fileOrFolder) => {
    const data = pathNative.parse(fileOrFolder);
    data.root = slash(data.root);
    data.dir = slash(data.dir);
    data.base = slash(data.base);
    data.ext = slash(data.ext);
    data.name = slash(data.name);
    return data;
};
export const format = (fileOrFolderObject) => {
    return slash(pathNative.format(fileOrFolderObject));
};
export const toNamespacedPath = (fileOrFolder) => {
    return slash(pathNative.toNamespacedPath(fileOrFolder));
};
export default {
    basename,
    dirname,
    extname,
    format,
    isAbsolute,
    join,
    normalize,
    parse,
    relative,
    resolve,
    toNamespacedPath,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4ZWRQYXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2VudHJ5L21peGVkUGF0aC9taXhlZFBhdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxVQUFVLE1BQU0sV0FBVyxDQUFBO0FBRWxDLDBHQUEwRztBQUMxRyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxZQUFvQixFQUFFLEVBQUU7SUFDNUMsTUFBTSxvQkFBb0IsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUMsd0tBQXdLO0lBQ3hPLElBQUksb0JBQW9CLEVBQUUsQ0FBQztRQUN6QixPQUFPLFlBQVksQ0FBQTtJQUNyQixDQUFDO0lBQ0QsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUMzQyxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxZQUFvQixFQUFVLEVBQUU7SUFDeEQsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ2xELENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsWUFBc0IsRUFBVSxFQUFFO0lBQ3hELE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ2hELENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsWUFBc0IsRUFBVSxFQUFFO0lBQzNELE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ25ELENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLFlBQW9CLEVBQVcsRUFBRTtJQUMxRCxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ2xDLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUM1QyxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBVSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUM3QyxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxZQUFvQixFQUFVLEVBQUU7SUFDdEQsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ2hELENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLFlBQW9CLEVBQUUsTUFBZSxFQUFVLEVBQUU7SUFDeEUsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUN6RCxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxZQUFvQixFQUFVLEVBQUU7SUFDdEQsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ2hELENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLFlBQW9CLEVBQWMsRUFBRTtJQUN4RCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQzNDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1QixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUIsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxrQkFBeUMsRUFBVSxFQUFFO0lBQzFFLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsWUFBb0IsRUFBVSxFQUFFO0lBQy9ELE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ3pELENBQUMsQ0FBQTtBQUNELGVBQWU7SUFDYixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLElBQUk7SUFDSixTQUFTO0lBQ1QsS0FBSztJQUNMLFFBQVE7SUFDUixPQUFPO0lBQ1AsZ0JBQWdCO0NBQ2pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7Rm9ybWF0SW5wdXRQYXRoT2JqZWN0LCBQYXJzZWRQYXRofSBmcm9tICdub2RlOnBhdGgnXG5cbmltcG9ydCBwYXRoTmF0aXZlIGZyb20gJ25vZGU6cGF0aCdcblxuLy8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9zbGFzaC9ibG9iLzk4YjYxOGY1YTNiZmNiNWRkMzc0YjIwNDg2ODgxODg0NWI4N2JiMmYvaW5kZXguanMjTDEtOVxuZXhwb3J0IGNvbnN0IHNsYXNoID0gKGZpbGVPckZvbGRlcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGlzRXh0ZW5kZWRMZW5ndGhQYXRoID0gZmlsZU9yRm9sZGVyLnN0YXJ0c1dpdGgoYFxcXFxcXFxcP1xcXFxgKSAvLyBTZWUgaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mvd2luMzIvZmlsZWlvL25hbWluZy1hLWZpbGUjd2luMzItZmlsZS1uYW1lc3BhY2VzOn46dGV4dD1maWxlJTIwSS9PJTJDLSx0aGUlMjAlMjIlNUMlNUMlM0YlNUMlMjIlMjBwcmVmaXgsLXRvJTIwYSUyMHBhdGhcbiAgaWYgKGlzRXh0ZW5kZWRMZW5ndGhQYXRoKSB7XG4gICAgcmV0dXJuIGZpbGVPckZvbGRlclxuICB9XG4gIHJldHVybiBmaWxlT3JGb2xkZXIucmVwbGFjZUFsbChgXFxcXGAsIGAvYClcbn1cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSAoZmlsZU9yRm9sZGVyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc2xhc2gocGF0aE5hdGl2ZS5ub3JtYWxpemUoZmlsZU9yRm9sZGVyKSlcbn1cbmV4cG9ydCBjb25zdCBqb2luID0gKC4uLnBhdGhTZWdtZW50czogc3RyaW5nW10pOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc2xhc2gocGF0aE5hdGl2ZS5qb2luKC4uLnBhdGhTZWdtZW50cykpXG59XG5leHBvcnQgY29uc3QgcmVzb2x2ZSA9ICguLi5wYXRoU2VnbWVudHM6IHN0cmluZ1tdKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHNsYXNoKHBhdGhOYXRpdmUucmVzb2x2ZSguLi5wYXRoU2VnbWVudHMpKVxufVxuZXhwb3J0IGNvbnN0IGlzQWJzb2x1dGUgPSAoZmlsZU9yRm9sZGVyOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgZmlsZU9yRm9sZGVyID0gc2xhc2goZmlsZU9yRm9sZGVyKVxuICByZXR1cm4gcGF0aE5hdGl2ZS5pc0Fic29sdXRlKGZpbGVPckZvbGRlcilcbn1cbmV4cG9ydCBjb25zdCByZWxhdGl2ZSA9IChmcm9tOiBzdHJpbmcsIHRvOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc2xhc2gocGF0aE5hdGl2ZS5yZWxhdGl2ZShmcm9tLCB0bykpXG59XG5leHBvcnQgY29uc3QgZGlybmFtZSA9IChmaWxlT3JGb2xkZXI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBzbGFzaChwYXRoTmF0aXZlLmRpcm5hbWUoZmlsZU9yRm9sZGVyKSlcbn1cbmV4cG9ydCBjb25zdCBiYXNlbmFtZSA9IChmaWxlT3JGb2xkZXI6IHN0cmluZywgc3VmZml4Pzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHNsYXNoKHBhdGhOYXRpdmUuYmFzZW5hbWUoZmlsZU9yRm9sZGVyLCBzdWZmaXgpKVxufVxuZXhwb3J0IGNvbnN0IGV4dG5hbWUgPSAoZmlsZU9yRm9sZGVyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc2xhc2gocGF0aE5hdGl2ZS5leHRuYW1lKGZpbGVPckZvbGRlcikpXG59XG5leHBvcnQgY29uc3QgcGFyc2UgPSAoZmlsZU9yRm9sZGVyOiBzdHJpbmcpOiBQYXJzZWRQYXRoID0+IHtcbiAgY29uc3QgZGF0YSA9IHBhdGhOYXRpdmUucGFyc2UoZmlsZU9yRm9sZGVyKVxuICBkYXRhLnJvb3QgPSBzbGFzaChkYXRhLnJvb3QpXG4gIGRhdGEuZGlyID0gc2xhc2goZGF0YS5kaXIpXG4gIGRhdGEuYmFzZSA9IHNsYXNoKGRhdGEuYmFzZSlcbiAgZGF0YS5leHQgPSBzbGFzaChkYXRhLmV4dClcbiAgZGF0YS5uYW1lID0gc2xhc2goZGF0YS5uYW1lKVxuICByZXR1cm4gZGF0YVxufVxuZXhwb3J0IGNvbnN0IGZvcm1hdCA9IChmaWxlT3JGb2xkZXJPYmplY3Q6IEZvcm1hdElucHV0UGF0aE9iamVjdCk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBzbGFzaChwYXRoTmF0aXZlLmZvcm1hdChmaWxlT3JGb2xkZXJPYmplY3QpKVxufVxuZXhwb3J0IGNvbnN0IHRvTmFtZXNwYWNlZFBhdGggPSAoZmlsZU9yRm9sZGVyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc2xhc2gocGF0aE5hdGl2ZS50b05hbWVzcGFjZWRQYXRoKGZpbGVPckZvbGRlcikpXG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGJhc2VuYW1lLFxuICBkaXJuYW1lLFxuICBleHRuYW1lLFxuICBmb3JtYXQsXG4gIGlzQWJzb2x1dGUsXG4gIGpvaW4sXG4gIG5vcm1hbGl6ZSxcbiAgcGFyc2UsXG4gIHJlbGF0aXZlLFxuICByZXNvbHZlLFxuICB0b05hbWVzcGFjZWRQYXRoLFxufVxuIl19